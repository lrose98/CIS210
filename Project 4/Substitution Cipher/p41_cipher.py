'''
CIS 210 Project 4-1: Cipher text with a Password

Author: Lillie Rose

Credits: Joey Valko
'''
def removeDupes(myString):
    ''' (str) -> str
    Takes a string and removes all of the duplicate characters. Returns the
    result.
                #Examples of use:
    >>>removeDupes('hello')
    helo
    >>>removeDupes('jazz')
    jaz
    >>>removeDupes('aaaaaaaaaa')
    a
    '''
    newStr = ""
    for ch in myString:
        if ch not in newStr:
            newStr = newStr + ch
    return newStr

def removeMatches(myString, psw):
    ''' (str, str) -> str
    Function takes in two parameters. Takes any string (myString) and removes
    any characters that are also in the second string parameter(psw). Returns
    the new string.
                #Examples of use:
    >>>removeMatches('hello', ''october)
    'hll'
    >>>removeMatches('funky', 'beats')
    'funky'
    >>>removeMatches('water', 'iswet')
    'atr'
    '''
    newStr = " "
    for ch in myString:
        if ch not in psw:
          newStr = newStr + ch
    return newStr
    
def genKeyFromPass(psw):
    ''' (str) -> str
    All repeating characters are removed from the original string. All repeating
    characters from the new string are removed from the alphabet. Then, the 'key' string
    is constructed by taking the last letter of the original character and finishing the
    the alphabet and then starting voer until all characters of the alphabet are said.
                #Examples of use:
    >>>genKeyFromPass('october')
    'octbersuvwxyzadfghijklmnpq'
    >>>genKeyFromPass('coding')
    'codinghjklmpqrstuvwxyzabef'
    >>>genKeyFromPass('python')
    'pythonqrsuvwxzabcdefgijklm'
    '''
    key = 'abcdefghijklmnopqrstuvwxyz'
    password = removeDupes(psw)
    lastChar = password[-1]
    lastIdx = key.find(lastChar)
    afterString = removeMatches(key[lastIdx+1:], psw)
    beforeString = removeMatches(key[:lastIdx], psw)

    key = password + afterString + beforeString
    key = key.replace(" ", "")
    return key

def substitutionEncrypt(plainText, psw):
    '''
    Removes all spaces from string(plainText)Encrypts the string using a key
    generated by the passoword (genKeyFromPass(psw)).
                #Examples of use:
    >>>substitutionEncrypt('the quick brown fox', 'ajax')
    'qdznrexgjoltkblu'

    >>>substitutionEncrypt('hello world', 'october')
    'ueyydmdhyb'

    >>>substitutionEncrypt('look at this line', 'applebath')
    'nrrmaxxijwnjqb'
    '''
    passKey = genKeyFromPass(psw)
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    plainText = plainText.lower()
    plainText = plainText.replace(" ", "")  #remove all spaces
    cipherText = ""
    for ch in plainText:
        idx = alphabet.find(ch)
        cipherText = cipherText + passKey[idx]
    return cipherText

def substitutionDecrypt(encodedText, psw):
    ''' (str, str) -> str
   Removes all spaces from the encrypted text(plainText)Decodes the text using
   key generated by the password (genKeyFromPass(psw)).
    >>>substitutionEncrypt('qdznrexgjoltkblu', 'ajax')
    'the quick brown fox'
    >>>substitutionEncrypt('ueyydmdhyb', 'october')
    'hello world'
    >>>substitutionEncrypt('nrrmaxxijwnjqb', 'applebath')
    'look at this line'
    '''
    passKey = genKeyFromPass(psw)
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    plainText = encodedText.lower()
    plainText = encodedText.replace(" ", "")  #remove all spaces
    cipherText = ""
    for ch in plainText:
        idx = passKey.find(ch)
        cipherText = cipherText + alphabet[idx]
    return cipherText

def main():
    '''
    User inputs a message and a password. Function then encrypts the message, prints it,
    decodes the message, and prints that. Returns none.
                #Examples of use:
    >>>main()
    Message you want to excrypt:hello world
    Your password:october
    ... please wait while we encrypt your message...
    Message encrypted to ueyydmdhyb
    ... please wait while we verify  your original message through decryption...
    Message decrypted to helloworld
    '''
    plainText = input('Message you want to encrypt:')
    psw = input('Your password:')
    print('... please wait while we encrypt your message...')
    print('...') #space
    encodedText = substitutionEncrypt(plainText, psw)

    print('Message encrypted to ' + encodedText)

    print('... please wait while we verify  your original message through decryption...')
    decodedText = substitutionDecrypt(encodedText, psw)
    print('...') #space
    print('Message decrypted to ' + decodedText)


    return None
